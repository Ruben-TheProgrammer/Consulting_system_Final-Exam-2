import java.awt.Desktop;
import java.awt.Font;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Date;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

/**
 *
 * @author ruben
 */
public class consultas extends javax.swing.JInternalFrame {
    
    Connection coneccionsql;
    Statement sentenciasql;
    DefaultTableModel modelo_tabla;  
    Integer idConsultas;
    Integer id_cliente;
    /**
     * Creates new form venta
     */
    public consultas() {
       initComponents();
        coneccionsql = conectar.getConnection();
        CargarPacientes();
        cargarMedicos();
        llenarTablar();
    }
    
        // Convertir Util.Date a sql.date
    //--------------------------------------------------------------------------
    private static java.sql.Date convertUtilToSql(java.util.Date uDate) {
        java.sql.Date sDate = new java.sql.Date(uDate.getTime());
        return sDate;
    }
    public void llenarTablar() {
        try {
            //encabezados de la tabla
            String[] titulos = {"id", "Fecha", "Pacientes", "Medicos", "Diagnosticos"};
            String stsql = "SELECT consultas.id AS id, consultas.fecha, pacientes.nombre AS paciente, medicos.nombre AS medico, consultas.diagnostico FROM consultas JOIN pacientes ON pacientes.id = consultas.id_paciente JOIN medicos ON medicos.id = consultas.id_medico;";
            modelo_tabla = new DefaultTableModel(null, titulos);
            sentenciasql = coneccionsql.createStatement();
            ResultSet rs = sentenciasql.executeQuery(stsql);

            //arreglo fila, para almacenar registros
            String[] fila = new String[5];
            //while para insertar registros en la tabla
            while (rs.next()) {
                fila[0] = rs.getString("id");
                fila[1] = rs.getString("fecha");
                fila[2] = rs.getString("paciente");
                fila[3] = rs.getString("medico");
                fila[4] = rs.getString("diagnostico");
                modelo_tabla.addRow(fila);
            }

            //agrego el default model
            tablaVentas.setModel(modelo_tabla);

            //definir el ancho de las columnas
            int[] anchos = {50, 100, 100, 100,100,100};
            for (int i = 0; i < tablaVentas.getColumnCount(); i++) {
                tablaVentas.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    void CargarPacientes() {
        try {
            String stsql = "select * from pacientes order by nombre";
            sentenciasql = coneccionsql.createStatement();
            ResultSet rs = sentenciasql.executeQuery(stsql);
            while (rs.next()) {
                 comboPacientes.addItem(rs.getString("nombre"));
            }
            rs.close();
        } catch (Exception e) {
            System.err.println("ERROR AL INTENTAR LISTAR LOS PACIENTES:" + e);
        }
    }
    void cargarMedicos(){
        try{
            String stsql = "select * from medicos order by nombre";
            sentenciasql = coneccionsql.createStatement();
            ResultSet rs = sentenciasql.executeQuery(stsql);
            while (rs.next()){
                comboMedicos.addItem(rs.getString("nombre"));
            }
            rs.close();
        } catch (Exception e){
            System.err.println("Error al intentar Listar los medicos:" + e);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboPacientes = new javax.swing.JComboBox<>();
        comboMedicos = new javax.swing.JComboBox<>();
        BotonGuardar = new javax.swing.JButton();
        campoFecha = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaVentas = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        campoDiagnostico = new javax.swing.JTextField();
        botonEditar = new javax.swing.JButton();
        BotonBorrar = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setClosable(true);

        jLabel1.setText("Registro de consultas");

        jLabel2.setText("Paciente");

        jLabel3.setText("Medico:");

        comboPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPacientesActionPerformed(evt);
            }
        });

        BotonGuardar.setText("GUARDAR");
        BotonGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonGuardarMouseClicked(evt);
            }
        });

        campoFecha.setDateFormatString("dd/MM/yyyy");

        jLabel4.setText("Fecha");

        tablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaVentasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaVentas);

        jLabel5.setText("Diagnostico:");

        campoDiagnostico.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                campoDiagnosticoInputMethodTextChanged(evt);
            }
        });
        campoDiagnostico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                campoDiagnosticoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoDiagnosticoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoDiagnosticoKeyTyped(evt);
            }
        });

        botonEditar.setText("EDITAR");
        botonEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonEditarMouseClicked(evt);
            }
        });

        BotonBorrar.setText("BORRAR");
        BotonBorrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonBorrarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(41, 41, 41))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboPacientes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(41, 41, 41))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboMedicos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(41, 41, 41))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(campoFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 41, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(campoDiagnostico)
                                .addGap(18, 18, 18)))))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(BotonGuardar)
                .addGap(18, 18, 18)
                .addComponent(botonEditar)
                .addGap(18, 18, 18)
                .addComponent(BotonBorrar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(campoFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(comboPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(comboMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(campoDiagnostico)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonEditar)
                    .addComponent(BotonGuardar)
                    .addComponent(BotonBorrar))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    Integer buscarPaciente(String nombre) {
        try {
            String stsql = "SELECT id FROM pacientes WHERE nombre = '"+nombre+"'";
            System.out.println(stsql);
            sentenciasql = coneccionsql.createStatement();
            ResultSet rs = sentenciasql.executeQuery(stsql);
            if (rs.next()) {
                return rs.getInt("id");
            } else {
                return null;
            }
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "Error al buscar el id del paciente");
        }
        return null;
    }
        Integer[] buscarMedico(String nombre) {
        try {
            String stsql = "SELECT id, nombre FROM medicos WHERE nombre = '"+nombre+"'";
            System.out.println(stsql);
            sentenciasql = coneccionsql.createStatement();
            ResultSet rs = sentenciasql.executeQuery(stsql);
            if (rs.next()) {
                Integer[] array = {rs.getInt("id"), rs.getInt("id")};
                return array;
            } else {
                return null;
            }
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "Error al buscar el id del medico");
        }
        return null;
    }
    private void comboPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPacientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboPacientesActionPerformed

    private void BotonGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonGuardarMouseClicked
    try{
        java.util.Date fecha_venta = campoFecha.getDate();
        String nombrePaciente = comboPacientes.getSelectedItem().toString();
        String nombreMedico = comboMedicos.getSelectedItem().toString();
        String diagnostico = campoDiagnostico.getText();
        Integer[] array  = buscarMedico(nombreMedico);
        int precio = array[1];
        int idProducto = array[0];
        
        
        String sqlguardar = "INSERT INTO consultas (fecha, id_paciente, id_medico, diagnostico) VALUES (?, ?, ?, ?)";
        PreparedStatement ps = coneccionsql.prepareStatement(sqlguardar);
        ps.setDate(1, convertUtilToSql(fecha_venta));
        ps.setInt(2, buscarPaciente(nombrePaciente));
        ps.setInt(3, idProducto);
        ps.setString(4, diagnostico);
        
        int n = ps.executeUpdate();
            if (n > 0) {
                campoDiagnostico.setText("");
                
                llenarTablar();
                JOptionPane.showMessageDialog(this, "Se guardó correctamente");
            } else {
                JOptionPane.showMessageDialog(this, "Error al guardar");
            }
            ps.close();
        }catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(rootPane, "Error: No se podo registrar al diagnostico!");
    }
    }//GEN-LAST:event_BotonGuardarMouseClicked

    private void botonEditarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonEditarMouseClicked
        // TODO add your handling code here:
                try {
                    java.util.Date fecha = campoFecha.getDate();
                    String paciente = comboPacientes.getSelectedItem().toString();
                    String medicos = comboMedicos.getSelectedItem().toString();
                    String diagnostico = campoDiagnostico.getText();

            //Guardar en la base de datos
            String stactualizar = "UPDATE consultas SET fecha=?, id_paciente=?, id_medico=?, diagnostico=? WHERE id=?";
            PreparedStatement ps = coneccionsql.prepareStatement(stactualizar);
            ps.setDate(1, convertUtilToSql(fecha));
            ps.setInt(2, buscarPaciente(paciente));
            ps.setInt(3, buscarMedico(medicos)[0]);
            ps.setString(4, diagnostico);
            ps.setInt(5, idConsultas);
            
            int n = ps.executeUpdate();
            if (n > 0) {
                //limpiar formulario
                campoDiagnostico.setText("");
                
                //reiniciar el estado de los botones
                BotonGuardar.setVisible(false);
                botonEditar.setVisible(true);

                llenarTablar();
                JOptionPane.showMessageDialog(this, "Se actualizo correctamente");
            } else {
                JOptionPane.showMessageDialog(this, "Error al actualizar");
            }
            ps.close();

        } catch (Exception e) {
            System.err.println(e);
            JOptionPane.showMessageDialog(rootPane, "Error: No se podo Editar al cliente!");
        }
    }//GEN-LAST:event_botonEditarMouseClicked

    private void tablaVentasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaVentasMouseClicked
        if (evt.getButton() == 1) {
            int fila = tablaVentas.getSelectedRow();
            try {
                String stsql = "SELECT consultas.id AS id, consultas.fecha, pacientes.nombre AS paciente, medicos.nombre AS medico, consultas.diagnostico FROM consultas JOIN pacientes ON pacientes.id = consultas.id_paciente JOIN medicos ON medicos.id = consultas.id_medico WHERE consultas.id = " + tablaVentas.getValueAt(fila, 0);
                sentenciasql = coneccionsql.createStatement();
                ResultSet rs = sentenciasql.executeQuery(stsql);
                rs.next();
                
                idConsultas = rs.getInt("id");
                campoFecha.setDate(rs.getDate("fecha"));
                comboPacientes.setSelectedItem(rs.getString("paciente"));
                comboMedicos.setSelectedItem(rs.getString("medico"));
                campoDiagnostico.setText(rs.getString("diagnostico"));

                botonEditar.setVisible(true);
                BotonGuardar.setVisible(false);
                BotonBorrar.setVisible(true);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error tabla: " + e.getMessage());
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_tablaVentasMouseClicked

    private void BotonBorrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonBorrarMouseClicked
        // TODO add your handling code here:
    try {
            //Borrar registro en la base de datos
            String stborrar = "DELETE FROM consultas WHERE id =" + idConsultas;
            PreparedStatement ps = coneccionsql.prepareStatement(stborrar);
            int n = ps.executeUpdate();
            if (n > 0) {
                JOptionPane.showMessageDialog(this, "Se borro correctamente");
            } else {
                JOptionPane.showMessageDialog(this, "Error al borrar");
            }
            ps.close();

            llenarTablar();
            //limpiar formulario
            campoDiagnostico.setText("");

            //Reiniciar el estado de los botones
            BotonGuardar.setVisible(true);
            botonEditar.setVisible(false);
            BotonBorrar.setVisible(false);

        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_BotonBorrarMouseClicked

    private void campoDiagnosticoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoDiagnosticoKeyTyped
   // TODO add your handling code here:
    }//GEN-LAST:event_campoDiagnosticoKeyTyped

    private void campoDiagnosticoInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_campoDiagnosticoInputMethodTextChanged
   
    }//GEN-LAST:event_campoDiagnosticoInputMethodTextChanged

    private void campoDiagnosticoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoDiagnosticoKeyPressed
        // TODO add your handling code here:
  
    }//GEN-LAST:event_campoDiagnosticoKeyPressed

    private void campoDiagnosticoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoDiagnosticoKeyReleased

    }//GEN-LAST:event_campoDiagnosticoKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonBorrar;
    private javax.swing.JButton BotonGuardar;
    private javax.swing.JButton botonEditar;
    private javax.swing.JTextField campoDiagnostico;
    private com.toedter.calendar.JDateChooser campoFecha;
    private javax.swing.JComboBox<String> comboMedicos;
    private javax.swing.JComboBox<String> comboPacientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tablaVentas;
    // End of variables declaration//GEN-END:variables
}
